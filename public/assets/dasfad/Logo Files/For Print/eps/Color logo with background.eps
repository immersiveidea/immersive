%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2400 1018
%%HiResBoundingBox: 0 0 2400 1017.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2400 1017.12 re
W
q
[0.24 0 0 -0.24 0 1017.12] cm
q
0 0 10000 4234.375 re
W*
q
[3.124973 0 0 3.123893 0.042777 0] cm
/DeviceRGB {} CS
[0.1608 0.1608 0.1608] SC
/DeviceRGB {} cs
[0.1608 0.1608 0.1608] sc
0 0 3200 1355.48035 re
f
Q
q
[48.783241 0 0 48.766369 2560.8376 -1369.56274] cm
q
29.399 57.112 m
30.014 57.419998 30.476 57.958 30.476 58.494999 c
30.476 59.534 29.438 60.455997 28.476999 59.957001 c
13.254 52.076 l
12.408 51.577 11.678 51.268002 11.678 50.192001 c
11.678 49.077 12.37 48.807003 13.254 48.27 c
28.476999 40.389 l
29.514999 40.042999 30.476 40.813 30.476 41.851002 c
30.476 42.426003 30.014999 42.965 29.399 43.274002 c
15.638 50.192001 l
29.399 57.112 l
h
W
[18.798 0 0 19.791435 11.678002 40.30507] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.013242 def
/xMax 1 def
/yMax 1.018164 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1 0 axialSH
Q
q
29.033001 60.209 m
28.825001 60.209 28.620001 60.157001 28.425001 60.056999 c
13.202002 52.175999 l
13.116001 52.125999 13.037002 52.080997 12.960002 52.035 c
12.212002 51.604 11.565002 51.230999 11.565002 50.192001 c
11.565002 49.135002 12.159002 48.786003 12.911002 48.343002 c
13.004003 48.289001 13.098002 48.233002 13.195003 48.174004 c
28.424004 40.289001 l
28.619003 40.223 28.801004 40.192001 28.982004 40.192001 c
29.882004 40.192001 30.588005 40.920002 30.588005 41.850002 c
30.588005 42.437004 30.151005 43.022003 29.449005 43.372002 c
15.887005 50.190002 l
29.449005 57.008003 l
30.140005 57.354004 30.588005 57.938004 30.588005 58.492004 c
30.587999 59.407001 29.861 60.209 29.033001 60.209 c
h
28.982 40.418999 m
28.826 40.418999 28.668001 40.445 28.512001 40.496998 c
13.306 48.369999 l
13.215 48.426998 13.118 48.482998 13.025 48.536999 c
12.282 48.975998 11.790999 49.264999 11.790999 50.191998 c
11.790999 51.101997 12.327999 51.410999 13.072 51.839996 c
13.151 51.884995 13.23 51.929996 13.311 51.978996 c
28.528 59.855995 l
28.690001 59.939995 28.860001 59.982994 29.032 59.982994 c
29.729 59.982994 30.362 59.273994 30.362 58.494995 c
30.362 58.029995 29.955 57.514996 29.348 57.211994 c
15.386 50.191994 l
29.348 43.171993 l
29.963999 42.863995 30.362 42.343994 30.362 41.850994 c
30.363001 41.048 29.756001 40.418999 28.982 40.418999 c
h
W
[19.023003 0 0 20.016998 11.565002 40.192] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
0 1 0 axialSH
Q
q
46.384998 64.416 m
46.153999 65.107002 45.462997 65.493004 44.771 65.376999 c
44.001999 65.223999 43.501999 64.491997 43.617001 63.684998 c
43.617001 63.608997 43.656002 63.493996 43.694 63.377998 c
53.574001 35.546997 l
53.804001 34.854996 54.496002 34.508999 55.188 34.623997 c
55.917999 34.777996 56.457001 35.508995 56.341 36.275997 c
56.341 36.353996 56.301998 36.468998 56.264 36.545998 c
46.384998 64.416 l
h
W
[12.756168 0 0 30.795161 43.600576 34.602253] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.007728 def
/yMin -0.003028 def
/xMax 1.007859 def
/yMax 1.003104 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc2_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc2_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc2_0 } {
0.5 sub 2 mul 0 add xpdfFunc2_1
} ifelse
}
def
-0.007728 1.007859 0 axialSH
Q
q
45.015999 65.511002 m
44.927998 65.511002 44.839001 65.502998 44.752998 65.488998 c
43.915997 65.321999 43.382 64.540001 43.505997 63.669998 c
43.504997 63.593998 43.543995 63.476997 43.584995 63.351997 c
53.467995 35.509998 l
53.674995 34.891998 54.245995 34.489998 54.924995 34.489998 c
55.018997 34.489998 55.112995 34.498997 55.205994 34.512997 c
56.017994 34.684998 56.574993 35.482998 56.452995 36.293995 c
56.453995 36.379993 56.405994 36.513996 56.365993 36.595993 c
46.490993 64.451996 l
46.280998 65.084 45.688 65.511002 45.015999 65.511002 c
h
54.924999 34.715 m
54.344997 34.715 53.856998 35.055 53.681 35.582001 c
43.800999 63.415001 l
43.765999 63.519001 43.730999 63.628002 43.730999 63.685001 c
43.622997 64.452003 44.079998 65.124001 44.792999 65.266998 c
44.863998 65.278999 44.939999 65.284996 45.015999 65.284996 c
45.591 65.284996 46.098999 64.921997 46.278999 64.380997 c
56.16 36.508995 l
56.201 36.423996 56.23 36.326996 56.23 36.277996 c
56.334999 35.565994 55.856998 34.881996 55.166 34.734997 c
55.089001 34.722 55.007 34.715 54.924999 34.715 c
h
W
[12.981594 0 0 31.021004 43.488161 34.489996] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0.008178 def
/yMin 0 def
/xMax 1.008107 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc3_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc3_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc3_0 } {
0.5 sub 2 mul 0 add xpdfFunc3_1
} ifelse
}
def
-0.008178 1.008107 0 axialSH
Q
q
84.362 50.192001 m
70.599998 43.273998 l
69.986 42.964996 69.525002 42.425999 69.525002 41.850998 c
69.525002 40.813 70.562004 39.888996 71.523003 40.388996 c
86.746002 48.269997 l
87.631004 48.806995 88.321999 49.076996 88.321999 50.191998 c
88.321999 51.267998 87.591995 51.576996 86.746002 52.075996 c
71.523003 59.956997 l
70.562004 60.455997 69.525002 59.533997 69.525002 58.494995 c
69.525002 57.957996 69.986 57.419994 70.599998 57.111996 c
84.362 50.192001 l
h
W
[18.796997 0 0 19.847295 69.525001 40.249208] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin -0.018149 def
/xMax 1 def
/yMax 1.018113 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc4_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc4_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc4_0 } {
0.5 sub 2 mul 0 add xpdfFunc4_1
} ifelse
}
def
0 1 0 axialSH
Q
q
70.967003 60.209 m
70.139 60.209 69.411003 59.407001 69.411003 58.494999 c
69.411003 57.939999 69.858002 57.355999 70.550003 57.010998 c
84.112 50.192997 l
70.550003 43.374001 l
69.848 43.021999 69.411003 42.438 69.411003 41.852001 c
69.411003 40.939003 70.139 40.138 70.967003 40.138 c
71.176003 40.138 71.380005 40.188999 71.575005 40.290001 c
86.798004 48.171001 l
86.902 48.233002 86.996002 48.290001 87.088005 48.344002 c
87.841003 48.786003 88.435005 49.136002 88.435005 50.193001 c
88.435005 51.232002 87.789001 51.605 87.040009 52.035999 c
86.962006 52.082001 86.883011 52.126999 86.803009 52.174 c
71.575012 60.057999 l
71.379997 60.157001 71.176003 60.209 70.967003 60.209 c
h
70.967003 40.362999 m
70.271004 40.362999 69.637001 41.071999 69.637001 41.850998 c
69.637001 42.343998 70.034004 42.863998 70.651001 43.171997 c
84.612999 50.191998 l
70.651001 57.211998 l
70.044998 57.516998 69.637001 58.031998 69.637001 58.494999 c
69.637001 59.273998 70.271004 59.982998 70.967003 59.982998 c
71.139 59.982998 71.309006 59.939999 71.471001 59.855999 c
86.694 51.975998 l
86.768997 51.929996 86.848999 51.884998 86.927002 51.839996 c
87.671005 51.409996 88.209 51.101997 88.209 50.191998 c
88.209 49.263996 87.718002 48.975998 86.973999 48.536999 c
86.880997 48.482998 86.785995 48.426998 86.686996 48.367001 c
71.470993 40.491001 l
71.308998 40.404999 71.139 40.362999 70.967003 40.362999 c
h
W
[19.024002 0 0 20.070999 69.411001 40.137999] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin 0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc5_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc5_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc5_0 } {
0.5 sub 2 mul 0 add xpdfFunc5_1
} ifelse
}
def
0 1 0 axialSH
Q
Q
q
[99.016907 0 0 98.982658 152.13266 1942.3326] cm
q
10.56 5.52 m
11.373334 5.826667 12.106668 6.32 12.76 7 c
14.160001 8.413333 14.860001 10.216666 14.860001 12.41 c
14.860001 14.603334 14.160001 16.413334 12.76 17.84 c
12.106668 18.52 11.373334 19.013334 10.56 19.32 c
9.72 19.666666 8.860001 19.84 7.980001 19.84 c
2.320001 19.84 l
2.133334 19.84 1.970001 19.77 1.830001 19.630001 c
1.690001 19.490002 1.620001 19.326668 1.620001 19.140001 c
1.620001 17.700001 l
1.620001 17.500002 1.690001 17.330002 1.830001 17.190001 c
1.970001 17.049999 2.133334 16.98 2.320001 16.980001 c
7.920001 16.980001 l
9.106668 16.980001 10.070001 16.546669 10.81 15.680001 c
11.55 14.813335 11.92 13.726667 11.92 12.420001 c
11.92 11.113335 11.55 10.026668 10.81 9.160001 c
10.070001 8.293334 9.106668 7.860001 7.920001 7.860001 c
2.320001 7.860001 l
2.133334 7.860001 1.970001 7.79 1.830001 7.650001 c
1.690001 7.510001 1.620001 7.340001 1.620001 7.14 c
1.620001 5.7 l
1.620001 5.513333 1.690001 5.35 1.830001 5.21 c
1.970001 5.07 2.133334 5 2.320001 5 c
7.980001 5 l
8.860001 5 9.72 5.173333 10.56 5.52 c
h
32.208 18.860001 m
32.301334 19.073334 32.278 19.290001 32.138 19.51 c
31.998001 19.73 31.808001 19.84 31.568001 19.84 c
18.248001 19.84 l
18.128 19.84 18.014668 19.809999 17.908001 19.75 c
17.801334 19.690001 17.721334 19.613333 17.668001 19.52 c
17.521336 19.306667 17.501335 19.086668 17.608002 18.860001 c
18.228003 17.400002 l
18.281336 17.266668 18.368002 17.160002 18.488003 17.080002 c
18.608004 17.000002 18.734669 16.960003 18.868002 16.960001 c
28.188002 16.960001 l
24.908001 9.120001 l
22.228001 15.520001 l
22.174667 15.653334 22.091333 15.756667 21.978001 15.830001 c
21.864668 15.903335 21.734667 15.940002 21.588001 15.940001 c
19.908001 15.940001 l
19.654669 15.940001 19.454668 15.833334 19.308001 15.620001 c
19.254667 15.526668 19.221334 15.420001 19.208 15.300001 c
19.194666 15.180001 19.208 15.066669 19.248001 14.960001 c
23.308001 5.440001 l
23.361334 5.306667 23.444668 5.200001 23.558001 5.12 c
23.671333 5.04 23.801334 5 23.948 5.000001 c
25.868 5.000001 l
26.014666 5.000001 26.144667 5.04 26.257999 5.12 c
26.371332 5.2 26.454666 5.306667 26.507999 5.440001 c
32.208 18.860001 l
h
45.535999 12.42 m
46.109333 12.78 46.546001 13.22 46.846001 13.74 c
47.146 14.259999 47.296001 14.839999 47.296001 15.48 c
47.296001 16.986666 46.722668 18.139999 45.576 18.939999 c
44.802666 19.499998 43.756001 19.853333 42.436001 19.999998 c
42.355999 19.999998 l
42.169334 19.999998 42.015999 19.939999 41.896 19.819998 c
41.736 19.673332 41.655998 19.499998 41.655998 19.299997 c
41.655998 17.859997 l
41.655998 17.686663 41.716 17.533331 41.835999 17.399998 c
41.955997 17.266665 42.102665 17.186665 42.275997 17.159998 c
42.902664 17.09333 43.389328 16.946665 43.735996 16.719997 c
44.002663 16.559998 44.182663 16.353331 44.275997 16.099997 c
44.32933 15.95333 44.355999 15.766663 44.355999 15.539996 c
44.355999 15.39333 44.32933 15.266663 44.275997 15.159996 c
44.222664 15.05333 44.12933 14.953329 43.995998 14.859996 c
43.609329 14.593329 43.109329 14.366663 42.495998 14.179996 c
42.175999 14.079995 l
41.509331 13.893329 40.896 13.739995 40.335999 13.619995 c
40.216 13.593328 40.022663 13.546661 39.755997 13.479995 c
39.535995 13.419994 l
39.055996 13.299995 38.549328 13.133327 38.015995 12.919994 c
37.229328 12.586661 36.582661 12.166661 36.075996 11.659994 c
35.48933 11.073327 35.195995 10.299995 35.195995 9.339994 c
35.195995 8.019995 35.702663 6.946661 36.715996 6.119994 c
37.409328 5.533328 38.382664 5.159994 39.635994 4.999994 c
39.849327 4.973328 40.032661 5.033328 40.185993 5.179994 c
40.339325 5.326661 40.415993 5.499994 40.415993 5.699994 c
40.415993 7.139994 l
40.415993 7.313327 40.362659 7.466661 40.255993 7.599994 c
40.149326 7.733328 40.012661 7.809994 39.845993 7.829994 c
39.679325 7.849994 39.509327 7.886661 39.335995 7.939994 c
38.949326 8.08666 38.675995 8.229994 38.515995 8.369994 c
38.355995 8.509995 38.242664 8.653328 38.175995 8.799995 c
38.109329 9.026661 38.075996 9.239995 38.075996 9.439995 c
38.075996 9.546661 38.135998 9.659995 38.255997 9.779995 c
38.442661 9.966662 38.715996 10.133328 39.075996 10.279995 c
39.235996 10.346662 39.515999 10.446662 39.915997 10.579995 c
42.415997 11.199995 l
42.535995 11.239995 l
43.162663 11.413328 43.615993 11.546661 43.895996 11.639995 c
44.522663 11.853328 45.069328 12.113328 45.535995 12.419994 c
45.535999 12.42 l
h
42.195999 7.9 m
42.035999 7.86 41.905998 7.776667 41.806 7.65 c
41.706001 7.523334 41.656002 7.373334 41.655998 7.2 c
41.655998 5.74 l
41.655998 5.526667 41.742664 5.346667 41.915997 5.2 c
41.982662 5.133334 42.069328 5.09 42.175995 5.07 c
42.282661 5.05 42.38266 5.046667 42.475994 5.06 c
43.649326 5.246667 44.602661 5.646667 45.335995 6.26 c
46.335995 7.086667 46.869328 8.14 46.935993 9.42 c
46.949326 9.606667 46.885994 9.776667 46.745995 9.93 c
46.605995 10.083334 46.435997 10.160001 46.235996 10.16 c
44.675995 10.16 l
44.502663 10.16 44.349331 10.099999 44.215996 9.98 c
44.082661 9.86 44.009327 9.713333 43.995995 9.54 c
43.942661 9.193334 43.829327 8.906667 43.655994 8.68 c
43.375996 8.346667 42.942661 8.093333 42.355995 7.92 c
42.315994 7.92 42.289326 7.913333 42.275993 7.9 c
42.195992 7.9 l
42.195999 7.9 l
h
39.855999 17.08 m
40.015999 17.106667 40.149334 17.186666 40.256001 17.32 c
40.362667 17.453333 40.416 17.599998 40.416 17.76 c
40.416 19.24 l
40.416 19.453333 40.335999 19.633333 40.175999 19.780001 c
40.042664 19.886667 39.889332 19.940001 39.716 19.940001 c
39.616001 19.940001 l
38.375999 19.753334 37.355999 19.346666 36.556 18.720001 c
35.515999 17.893335 34.929333 16.740002 34.796001 15.260001 c
34.769333 15.046668 34.829334 14.863335 34.976002 14.710001 c
35.122669 14.556667 35.296001 14.480001 35.496002 14.480001 c
37.076004 14.480001 l
37.262669 14.480001 37.422668 14.543335 37.556004 14.670001 c
37.689339 14.796667 37.762672 14.953334 37.776005 15.140001 c
37.816006 15.806668 38.142673 16.320002 38.756004 16.68 c
39.036003 16.84 39.402668 16.973333 39.856003 17.08 c
39.855999 17.08 l
h
60.883999 11.12 m
61.084 11.12 61.253998 11.19 61.393997 11.33 c
61.533997 11.47 61.603996 11.64 61.603996 11.84 c
61.603996 13.32 l
61.603996 13.506666 61.533997 13.669999 61.393997 13.81 c
61.253998 13.95 61.084 14.02 60.883999 14.02 c
54.304001 14.02 l
54.304001 19.139999 l
54.304001 19.326666 54.237335 19.49 54.104 19.629999 c
53.970665 19.769999 53.804001 19.839998 53.604 19.839998 c
52.084 19.839998 l
51.897335 19.839998 51.734001 19.769999 51.593998 19.629999 c
51.453995 19.49 51.383995 19.326666 51.383999 19.139999 c
51.383999 11.839999 l
51.383999 11.639999 51.453999 11.469999 51.593998 11.329999 c
51.733997 11.189999 51.897331 11.119999 52.084 11.119999 c
60.883999 11.119999 l
60.883999 11.12 l
h
61.784 5 m
61.970665 5 62.133999 5.07 62.274002 5.21 c
62.414005 5.35 62.484005 5.513333 62.484001 5.7 c
62.484001 7.16 l
62.484001 7.36 62.414001 7.53 62.274002 7.67 c
62.134003 7.81 61.970669 7.88 61.784 7.88 c
52.084 7.88 l
51.897335 7.88 51.734001 7.81 51.593998 7.67 c
51.453995 7.53 51.383995 7.36 51.383999 7.16 c
51.383999 5.7 l
51.383999 5.513333 51.453999 5.35 51.593998 5.21 c
51.733997 5.07 51.897331 5.000001 52.084 5 c
61.784 5 l
h
79.512001 18.860001 m
79.605331 19.073334 79.582001 19.290001 79.442001 19.51 c
79.302002 19.73 79.112 19.84 78.872002 19.84 c
65.552002 19.84 l
65.431999 19.84 65.318672 19.809999 65.212006 19.75 c
65.105339 19.690001 65.025345 19.613333 64.972008 19.52 c
64.82534 19.306667 64.805344 19.086668 64.91201 18.860001 c
65.532013 17.400002 l
65.58535 17.266668 65.672012 17.160002 65.792015 17.080002 c
65.912018 17.000002 66.038681 16.960003 66.172012 16.960001 c
75.492012 16.960001 l
72.212013 9.120001 l
69.532013 15.520001 l
69.478676 15.653334 69.395348 15.756667 69.282013 15.830001 c
69.168678 15.903335 69.038681 15.940002 68.892014 15.940001 c
67.212013 15.940001 l
66.958679 15.940001 66.758682 15.833334 66.612015 15.620001 c
66.558678 15.526668 66.525345 15.420001 66.512016 15.300001 c
66.498688 15.180001 66.512016 15.066669 66.552017 14.960001 c
70.612015 5.440001 l
70.665352 5.306667 70.74868 5.200001 70.862015 5.12 c
70.975349 5.04 71.105347 5 71.252014 5.000001 c
73.172012 5.000001 l
73.31868 5.000001 73.448677 5.04 73.562012 5.12 c
73.675346 5.2 73.758675 5.306667 73.812012 5.440001 c
79.512001 18.860001 l
h
92 5.52 m
92.813332 5.826667 93.546669 6.32 94.199997 7 c
95.599998 8.413333 96.299995 10.216666 96.299995 12.41 c
96.299995 14.603334 95.599998 16.413334 94.199997 17.84 c
93.546661 18.52 92.813332 19.013334 92 19.32 c
91.159996 19.666666 90.299995 19.84 89.419998 19.84 c
83.759995 19.84 l
83.573326 19.84 83.409996 19.77 83.269997 19.630001 c
83.129997 19.490002 83.059998 19.326668 83.059998 19.140001 c
83.059998 17.700001 l
83.059998 17.500002 83.129997 17.330002 83.269997 17.190001 c
83.409996 17.049999 83.573326 16.98 83.759995 16.980001 c
89.359993 16.980001 l
90.546661 16.980001 91.509995 16.546669 92.249992 15.680001 c
92.98999 14.813335 93.359993 13.726667 93.359993 12.420001 c
93.359993 11.113335 92.98999 10.026668 92.249992 9.160001 c
91.509995 8.293334 90.546661 7.860001 89.359993 7.860001 c
83.759995 7.860001 l
83.573326 7.860001 83.409996 7.79 83.269997 7.650001 c
83.129997 7.510001 83.059998 7.340001 83.059998 7.14 c
83.059998 5.7 l
83.059998 5.513333 83.129997 5.35 83.269997 5.21 c
83.409996 5.07 83.573326 5 83.759995 5 c
89.419998 5 l
90.299995 5 91.159996 5.173333 92 5.52 c
h
W
[94.679992 0 0 15.006159 1.620001 4.993841] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0.001367 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.396 mul 0.565 add
1 index 1 exp 0.556 mul 0.369 add
2 index 1 exp 0.459 mul 0.149 add
4 3 roll pop 
}
/xpdfFunc6_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.396 mul 0.961 add
1 index 1 exp -0.556 mul 0.925 add
2 index 1 exp -0.459 mul 0.608 add
4 3 roll pop 
}
/xpdfFunc6_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc6_0 } {
0.5 sub 2 mul 0 add xpdfFunc6_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
